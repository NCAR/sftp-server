#!/bin/sh
PROG=run-test-server
DESC="Start a test SFTP server container with temporary keys"
USAGE1="$PROG [-u|--user=user:grp] [-s|--server=svcont] [-n|--network=network]
                 [-p|--package=clientpackage]"
USAGE2="$PROG [-h|--help]"
USAGE="Usage:
    $USAGE1
    $USAGE2"

DEFAULT_CONT=testsftp
DEFAULT_USER=sweetuser:sftp

HELP_TEXT="
        Configure and start a test SFTP container with generated server- and
        client-side keys.

        The SFTP container is always assigned a name. The name can be given
        on the command line, but if it is not, \"$DEFAULT_CONT\" is used.
        The container will run detached. Use \"docker logs <name>\"
        to view logs. Use \"docker kill <name>\" to stop/remove the server
        container.

        A client container can access the generated keys if the
        \"--volumes-from <containername>\" argument is included in the
        \"docker run\" command. Specifically, the volumes shared from
        the server container include \"/run/secrets\", and \"/mnt\"; the
        former contains the shared keys, and the later is the volume that
        SFTP will serve: this allows a client to bypass the SFTP interface to
        either seed the data that can be downloaded or verify data that is
        uploaded. See \"run-test-client\".

        This script intentionally shuns volume mounts and docker-compose.
        It is designed for testing in remote CI environments (CircleCI in
        particular) and for use by external packages.

        The following flags are supported:

        -u|--user=user:grp
            If given, the username:groupname or uid:gid that the client will
            use. Default is $DEFAULT_USER.

        -s|--server=svcont
            The name to assign to the SFTP server container; if not given,
            \"${DEFAULT_CONT}\" is used.

        -n|--network=network
            The name of the network to use. Default is \"<container>_net\".

        -p|--package=clientpackage
            The name of the client package. The client keys will be installed
            under /run/secrets/<package>/client/test. Default is
            \"sftp-server\".

        -h|--help
            Display help text and exit.
"

SFTP_CONT=$DEFAULT_CONT
USER_ARG=$DEFAULT_USER
NETWORK=
SFTP_PORT=2222
CLIENT_PACKAGE=sftp-server

main () {
    processCommandLine "$@" || return 1

    setupNetwork ${NETWORK} || return

    removeExistingContainer ${SFTP_CONT} || return 1
    
    createStoppedSftpContainer ${SFTP_CONT} ${NETWORK} || return 1

    createKeyPairsUnderMnt ${SFTP_CONT} ${USER_ARG} || return 1

    moveKeyPairsToSecrets ${SFTP_CONT} || return 1

    echo "Starting container \"${SFTP_CONT}\""
    docker start -a ${SFTP_CONT}

    return $?
}

setupNetwork () {
    network="$1"
    netinfo=`docker network inspect ${network} 2>/dev/null`
    if [ ":$netinfo" = ":[]" ] ; then
        echo "Creating network \"${network}\"..."
        docker network create --driver bridge ${network} || return 1
    fi
    return 0
}

removeExistingContainer () {
    container="$1"
    id=`docker ps --filter "name=${container}" -q`
    if [ ":$id" != ':' ] ; then
        echo "Stopping existing container \"$container\""
        docker kill ${container}
    fi
    id=`docker ps -a --filter "name=${container}" -q`
    if [ ":$id" != ':' ] ; then
        echo "Removing existing container \"$container\""
        docker rm -f ${container}
    fi
}

createStoppedSftpContainer () {
    container="$1"
    network="$2"

    trap "docker rm -f ${container} >/dev/null 2>&1 ; exit 255" 1 2 13 15
    echo "Creating stopped container \"$container\""
    docker create --rm --name ${container} \
           -v /run/secrets -v /mnt \
           --network ${network} \
           --tmpfs /tmp:rw,noexec,nosuid \
           -e "SERVICE=server" \
           -e "CLIENT_PACKAGE=${CLIENT_PACKAGE}" \
           -e "RUN_ENV=test" \
           -e "ENTRYPOINT_DEBUG=0" \
           ncar/sftp-server:latest \
           /usr/sbin/sshd -D -e -p $SFTP_PORT

    set : `docker inspect -f '{{range $key, $value := .NetworkSettings.Networks}}{{$key}} {{end}}' ${container}`
    net="$2"
    if [ ":${net}" != ":${NETWORK}" ] ; then
        echo "$PROG: unable to attach to network \"${NETWORK}\" (using \"${net}\")" >&2
        return 1
    fi
    echo "Using network \"${net}\""

    echo "Initializing volume directories"
    docker run --rm \
           --volumes-from ${container} \
           debian:buster-slim \
           /bin/bash -c 'mkdir -p /var/data /mnt /run/secrets ; chmod 1777 /var/data /mnt'
}

createKeyPairsUnderMnt () {
    container="$1"
    usergrp="$2"

    echo "Creating client keys"
    docker run --rm \
       --volumes-from ${container} \
       -u ${usergrp} \
       -e "PACKAGE=${CLIENT_PACKAGE}" \
       -e "SERVICE=client" \
       -e "RUN_ENV=test" \
       --entrypoint /usr/local/sweet/sbin/sweet-entrypoint.sh \
       ncar/sftp-server:latest \
       /usr/local/sftp-server/sbin/ssh-keysync || return 1

    echo "Creating server"
    docker run --rm \
           --volumes-from ${container} \
           -e "SERVICE=server" \
           -e "RUN_ENV=test" \
           --tmpfs /tmp:rw,noexec,nosuid \
           --entrypoint /usr/local/sweet/sbin/sweet-entrypoint.sh \
           ncar/sftp-server:latest \
           /usr/local/sftp-server/sbin/ssh-keysync || return 1
}

moveKeyPairsToSecrets () {
    container="$1"

    echo "Installing keys"
    docker run --rm \
           --volumes-from ${container} \
           debian:buster-slim \
           /bin/bash -c 'mv /mnt/* /run/secrets'
}


processCommandLine () {
    while [ $# != 0 ] ; do
        arg="$1"
        shift
        case $arg in
            -h|--help)
                cat <<EOF
NAME            
        $PROG - $DESC

SYNOPSIS
        $USAGE1
        $USAGE2
        $USAGE3

DESCRIPTION$HELP_TEXT
EOF
                return 1 ;;

            -[usnp]?*)
                opt=`expr "${arg}" : '\(-.\).*'`
                rest=`expr "${arg}" : '-.\(.*\)'`
                set : ${opt} "${rest}" "$@"
                shift ;;

            --*=*)
                opt=`expr "${arg}" : '\(--[^=]*\)=.*'`
                rest=`expr "${arg}" : '--[^=]*=\(.*\)'`
                set : ${opt} "${rest}" "$@"
                shift ;;
            
            -u|--user)
                USER_ARG="$1"
                shift ;;
            
            -s|--server)
                SFTP_CONT="$1"
                shift ;;
            
            -n|--network)
                NETWORK="$1"
                shift ;;
            
            -p|--package)
                CLIENT_PACKAGE="$1"
                shift ;;
            
            -*)
                echo "$PROG: invalid option: $arg" >&2
                echo "$USAGE" >&2
                return 1 ;;
            
            *)
                echo "$PROG: unexpected arguments: $arg $@" >&2
                echo "$USAGE" >&2
                return 1 ;;
        esac
    done
    if [ ":${NETWORK}" = ":" ] ; then
        NETWORK="${SFTP_CONT}_net"
    fi

    return 0

}

main "$@"
