:
#
# Container ENTRYPOINT rc script for synchronizing server and client keys.
# This should only be used in cooperating client and server containers that
# want to share their public keyscontainers that
#
ls -la ${DATA_DIR}
df

#
# Keys should have been injected into $SECRETS_DIR.
#
wait-for-file -v --wait=0 "${SECRETS_DIR}/ssh_host_*_key" || exit 1
cp ${SECRETS_DIR}/ssh_host_*_keys* ${SECRETS_DIR}/*-id_* ${SSH_KEYS} || exit 1

TSTAMP=`tstamp`
IMAGE=`parmdb get -e IMAGE`
IMAGE_VERSION=`parmdb get -e IMAGE_VERSION`
echo "$TSTAMP $IMAGE $IMAGE_VERSION" >${DATA_DIR}/.server || exit 1

ls -la ${SSH_KEYS}

server and client both start by verifying $DATA_DIR and $SECRETS_VOL
are writable.

The server creates the $DATA_DIR/$PACKAGE/$RUN_ENV directory and the
$SECRETS_VOL/$PACKAGE/server/$RUN_ENV directory. It then ensures that
there are no keypairs in the secrets dir and no server-* files under
$SECRETS_VOL/$PACKAGE/$RUN_ENV. It then removes the
$SECRETS_VOL/$PACKAGE/$RUN_ENV/known_hosts file if it is there. It waits for a
$SECRETS_VOL/$PACKAGE/$RUN_ENV/client-<tstamp> file to show up. once
it does, it removes its server-<tstamp> file and creates its keypairs and
known_hosts file, then waits for an authorized_keys file to show up.

The client waits until there is no
$SECRETS_VOL/$PACKAGE/$RUN_ENV/known_hosts file, then waits for
a $SECRETS_VOL/$PACKAGE/$RUN_ENV/server-<tstamp> file to show up. It then
creates the $SECRETS_VOL/$PACKAGE/server/$RUN_ENV directory, removes any
$SECRETS_VOL/$PACKAGE/$RUN_ENV/client-* files and
$SECRETS_VOL/$PACKAGE/$RUN_ENV/authorized_keys file. It creates a
$SECRETS_VOL/$PACKAGE/$RUN_ENV/client-<tstamp> file to match the server-<tstamp>
file, creates its keypairs and authorized_keys file, then waits for a
known_hosts file.





