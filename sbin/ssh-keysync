#!/bin/sh
PROG=ssh-keysync
DESC="Generate SSH keys for client/server containers"
USAGE1="$PROG -c|--client=name"
USAGE2="$PROG -h|--help"
USAGE="Usage:
    $USAGE1
    $USAGE2"
SERVER_USERS="sftp sshd"
HELP_TEXT="
        This script will generate SSH keypairs for either the server or client
        side. The script assumes that if the executing user is
        \"sftp\" or \"sshd\", it should (re)generate the host keys, but if
        it is anything else, it should (re)generate the client keys. Keypairs
        will be written to

          /mnt/\${PACKAGE}/\${SERVICE}/\${RUN_ENV}

        while the authorized_keys and known_hosts files will be written to

          /mnt/\${PACKAGE}/\${RUN_ENV}

        with the expectation that the volume mounted to /mnt will
        be used subsequently as \$SECRETS_VOL in other containers.

        The following flags are supported:

        -c|--client=name
            Create user keypairs with names of the form \"<name>-id_<type>\",
            where <name> is the given name and <type> is one of the supported
            keytypes. By convention, <name> should be a username. If this
            option is not included, the username of the executing user is used.

        -h|--help
             Disply help text and quit.
"
EXECUSER=`id -un 2>/dev/null` # can run with numeric uid set to "non-user"
CLIENT_NAME=
while [ $# != 0 ] ; do
    arg="$1"
    shift
    case $arg in
        -h|--help)
            cat <<EOF
NAME            
        $PROG - $DESC

SYNOPSIS
        $USAGE1
        $USAGE2

DESCRIPTION$HELP_TEXT
EOF
            return 1 ;;

        --client=*)
            CLIENT_NAME=`expr "${arg}" : '--client=\(.*\)'` ;;

        -c|--client)
            CLIENT_NAME="$1"
            shift ;;

        -*)
            echo "$PROG: invalid option: $arg" >&2
            echo "$USAGE" >&2
            return 1 ;;
    esac
done
if [ ":${CLIENT_NAME}" = ":" ] ; then
    CLIENT_NAME=${EXECUSER}
fi

SCRIPTDIR=`cd \`dirname $0\`; pwd`
SWEETDIR=`cd ${SCRIPTDIR}/../../sweet ; pwd`
if [ `basename ${SWEETDIR}` != "sweet" ] ; then
    echo "$PROG: cannot determine SWEET directory" >&2
    exit 1
fi
PATH="${SWEETDIR}/bin:${SWEETDIR}/sbin:${PATH}" export PATH

in-docker-container
if [ $? != 0 ] ; then
    echo "$PROG: not in a container" >&2
    exit 1
fi

finally=:
for envvar in PACKAGE SERVICE RUN_ENV ; do
    eval val="\"\${$envvar}\""
    if [ ":${val}" = ":" ] ; then
       echo "$PROG: environment variable $envvar is not set" >&2
       finally="exit 1"
    fi
done
eval $finally

if [ ! -w /mnt ] ; then
    echo "$PROG: /mnt must be writable" >&2
    exit 1
fi


KEY_DIR="/mnt/${PACKAGE}/${SERVICE}/${RUN_ENV}"
SHARED_DIR="/mnt/${PACKAGE}/${RUN_ENV}"
AUTH_KEYS=${SHARED_DIR}/authorized_keys
KNOWN_HOST_KEYS=${SHARED_DIR}/known_host_keys

EXECUSER=`id -un 2>/dev/null` # can run with numeric uid set to "non-user"
role=client
for svu in ${SERVER_USERS} ; do
    if [ ":${EXECUSER}" = ":${svu}" ] ; then
        role=server
        break;
    fi
done

if [ ${role} = "server" ] ; then
    echo "${role}: Creating key directories"
    mkdir-config-tree /mnt || exit 1

    echo "${role}: Clean up previous keys"
    rm -f ${KEY_DIR}/ssh_host_*_key* || exit 1
    rm -f ${KNOWN_HOST_KEYS} || exit 1

    echo "${role}: Create keys in ${KEY_DIR}"
    ssh-key-init --server --known-host-keys=${KNOWN_HOST_KEYS} ${KEY_DIR} || exit 1
    echo "${role}: Done"
    
else
    echo "${role}: Creating key directories"
    mkdir-config-tree /mnt || exit 1

    echo "${role}: Clean up previous state"
    rm -f ${KEY_DIR}/*-id_* || exit 1
    rm -f ${AUTH_KEYS} || exit 1

    echo "${role}: Create keys in ${KEY_DIR}"
    ssh-key-init --client=${CLIENT_NAME} --auth-keys=${AUTH_KEYS} ${KEY_DIR}

    echo "${role}: Done"
fi


