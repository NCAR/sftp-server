#!/bin/sh
PROG=ssh-keysync
DESC="Generate SSH keys for client/server containers"
USAGE1="$PROG [-h|--help]"
USAGE="Usage:
    $USAGE1"
SERVER_USERS="sftp sshd"
HELP_TEXT="
        This script will generate SSH keypairs for either the server or client
        side. The script assumes that if the executing user is
        \"sftp\" or \"sshd\", it should (re)generate the host keys, but if
        it is anything else, it should (re)generate the client keys. Keypairs
        will be written to

          \${DATA_DIR}/\${PACKAGE}/\${SERVICE}/\${RUN_ENV}

        while the authorized_keys and known_hosts files will be written to

          \${DATA_DIR}/\${PACKAGE}/\${RUN_ENV}

        with the expectation that the volume mounted to \$DATA_DIR will
        be used subsequently as \$SECRETS_VOL in other containers.

        If the -h|--help option is given, the script will display help
        text and quit.

ENVIRONMENT
        DATA_DIR
            Application data volume mount-point. The permissions on this
            directory should be 1777.

"

MODE=sync

case $1 in
    -h|--help)
        cat <<EOF
NAME
        $PROG - $DESC

SYNOPSIS
        $USAGE1
        $USAGE2

DESCRIPTION$HELP_TEXT
EOF
        exit 0 ;;
esac

SCRIPTDIR=`cd \`dirname $0\`; pwd`
SWEETDIR=`cd ${SCRIPTDIR}/../../sweet ; pwd`
if [ `basename ${SWEETDIR}` != "sweet" ] ; then
    echo "$PROG: cannot determine SWEET directory" >&2
    exit 1
fi
PATH="${SWEETDIR}/bin:${SWEETDIR}/sbin:${PATH}" export PATH

in-docker-container
if [ $? != 0 ] ; then
    echo "$PROG: not in a container" >&2
    exit 1
fi

finally=:
for envvar in DATA_DIR PACKAGE SERVICE RUN_ENV ; do
    eval val="\"\${$envvar}\""
    if [ ":${val}" = ":" ] ; then
       echo "$PROG: environment variable $envvar is not set" >&2
       finally="exit 1"
    fi
done
eval $finally

if [ ! -w "${DATA_DIR}" ] ; then
    echo "$PROG: ${DATA_DIR} (\$DATA_DIR\") must be writable" >&2
    exit 1
fi


KEY_DIR="${DATA_DIR}/${PACKAGE}/${SERVICE}/${RUN_ENV}"
SHARED_DIR="${DATA_DIR}/${PACKAGE}/${RUN_ENV}"
AUTH_KEYS=${SHARED_DIR}/authorized_keys
KNOWN_HOST_KEYS=${SHARED_DIR}/known_host_keys

EXECUSER=`id -un`
role=client
for svu in ${SERVER_USERS} ; do
    if [ ":${EXECUSER}" = ":${svu}" ] ; then
        role=server
        break;
    fi
done

if [ ${role} = "server" ] ; then
    echo "${role}: Creating key directories"
    mkdir-config-tree ${DATA_DIR} || exit 1

    echo "${role}: Clean up previous keys"
    rm -f ${KEY_DIR}/ssh_host_*_key* || exit 1
    rm -f ${KNOWN_HOST_KEYS} || exit 1

    echo "${role}: Create keys"
    ssh-key-init --server --known-host-keys=${KNOWN_HOST_KEYS} ${KEY_DIR} || exit 1
    echo "${role}: Done"
    
else
    echo "${role}: Creating key directories"
    mkdir-config-tree ${DATA_DIR} || exit 1

    echo "${role}: Clean up previous state"
    rm -f ${KEY_DIR}/*-id_* || exit 1
    rm -f ${AUTH_KEYS} || exit 1

    echo "${role}: Create keys"
    ssh-key-init --client=${EXECUSER} --auth-keys=${AUTH_KEYS} ${KEY_DIR}

    echo "${role}: Done"
fi

