#!/bin/sh
PROG=run-test-client
DESC="Run a client container counterpart to the run-test-server container"
USAGE1="$PROG [-u|--user=uid:gid] [-s|--server=svcont] [-c|--client=clcont]
                 [-n|--network=network] [-i|--image=clientimage] command..."
USAGE2="$PROG -h|--help"
USAGE="Usage:
    $USAGE1
    $USAGE2"

DEFAULT_CONT=testsftp
DEFAULT_USER=sweetuser:sftp
DEFAULT_IMAGE=ncar/sftp-server:latest

HELP_TEXT="
        Start a test SFTP client container that connects to a container
        started using run-test-server and runs the \"NCAR/sftp-server\" test
        suite. The client container gets its volumes from the server container
        (using the \"--volumes-from\" docker create option); the volumes include
        \"/run/secrets\", \"/mnt\", and \"/var/data\".

        The client container uses the \"sftp-cl-entrypoint.rc\" as part of its
        ENTRYPOINT, and uses \"sbin/sftp-client-shell\" to run the final
        command. This implies that:

          - if no alternate docker image is specified, the command will run
            in the /usr/local/sftp-server directory;
          - special environment variables defined by the sftp-server package
            are set (see ENVIRONMENT  below);
          - if a command is provided on the command line, the command is
            executed in the client container; otherwise, if standard input is
            attached to a terminal, an interactive shell is created in the
            client container; otherwise, all known ncar/sftp-server test
            scripts are run.

        The following arguments are supported:

        -h|--help
            Display help text and exit.

        -u|--user=user:group
            If given, the username:groupname or uid:gid that the client will
            use. Default is $DEFAULT_USER. This must match the corresponding
            argument passed to \"run-test-server\".

        -s|--server=svcont
            The name to assign to the SFTP server container; if not given,
            \"${DEFAULT_CONT}\" is used. This must match the corresponding
            argument passed to \"run-test-server\".

        -n|--network=network
            The name of the docker network to use. Default is \"<svcont>_net\".

        -i|--image=clientimage
            The name of the docker image to use for the client container.
            Default is \"${DEFAULT_IMAGE}\".

        -d|--detach
            If given, the container will run detached.

        --rm
            If given, the container will removed when it stops.

        -c|--client=clcont
            If given, the name to assign to the client container. Default is
            the server container name with \"_cl\" appended.
"
ENVIRONMENT_HELP="
        The following special environment variables are all set automatically
        in the client container:

        SFTP_CLIENT
            Set to 1.

        SFTP_PORT
            The SFTP server container network port to connect to.

        SFTP_SERVER
            The name of the SFTP server container

        SFTP_SERVER_IS_UP
            Set to \"yes\" if and only if \"sbin/sftp-client-shell\" detected
            that the SFTP server is up.

        SFTPGROUP
        SFTPGROUPID
        SFTPUSER
        SFTPUSERID
            The group/user names/id of the user to log in as on the SFTP server

        ID_ED25519
        ID_RSA
        ID_ECDSA
             The paths to SSH identity files for the various key types.

        The following environment variables will be copied to the script's
        environment to the client container environment:

        STDOUT
        STDERR
             Names of standard output and erorr files.
"

SCRIPTDIR=`cd \`dirname $0\`; pwd`

SFTP_PORT=2222
SFTP_CONT=$DEFAULT_CONT
CL_CONT=
USER_ARG=$DEFAULT_USER
INTERACTIVE=0
NETWORK=
IMAGE=$DEFAULT_IMAGE
COMMAND=
ENTRYPOINT_DEBUG=${ENTRYPOINT_DEBUG:-0}
ATTACHED=-a
RM_ARG=

main () {
    processCommandLine "$@"

    if [ ":$CL_CONT" = ":" ] ; then
        CL_CONT="${SFTP_CONT}_cl"
    fi
    checkNetwork "${NETWORK}" || return 1
    
    checkServerContainer "${SFTP_CONT}" "${NETWORK}" || return 1

    runCommand "${USER_ARG}" "${SFTP_CONT}" "${CL_CONT}" "${NETWORK}" "${IMAGE}" ${COMMAND}

}

checkNetwork () {
    network="$1"
    netinfo=`docker network inspect ${network} 2>/dev/null`
    if [ ":$netinfo" = ":[]" ] ; then
        echo "$PROG: \"${network}\": no such network" >&2
        exit 1
    fi
    return 0
}


checkServerContainer () {
    container="$1"
    network="$2"
    echo "Checking for container \"$container\""
    id=`docker ps --filter "name=${container}" -q`
    if [ ":$id" = ':' ] ; then
        echo "$PROG: $container: no such container" >&2
        return 1
    fi
    set : `docker inspect -f '{{range $key, $value := .NetworkSettings.Networks}}{{$key}} {{end}}' ${container}`
    svnet="$2"
    if [ ":${svnet}" != ":${network}" ] ; then
        echo "$PROG: server uses network \"${svnet}\", not \"${network}\"" >&2
        return 1
    fi
    
    return 0
}

runCommand () {
    userArg="$1"
    shift
    container="$1"
    shift
    cl_container="$1"
    shift
    network="$1"
    shift
    image="$1"
    shift

    itOpt=
    iOpt=
    if [ $# = 0 ] && [ -t 0 ] ; then
        itOpt="-it"
        iOpt="-i"
        ATTACHED=-a
    fi

    STDOUT_ARG=
    if [ ":${STDOUT}" != ":" ] ; then
        STDOUT_ARG="-e STDOUT=${STDOUT}"
    fi
    STDERR_ARG=
    if [ ":${STDERR}" != ":" ] ; then
        STDERR_ARG="-e STDERR=${STDERR}"
    fi
    echo "Creating test client for server container \"$container\"..."
    docker create $itOpt $RM_ARG --name ${cl_container} \
           --network ${network} \
           --volumes-from ${container} \
           --tmpfs /tmp:rw,noexec,nosuid \
           -u ${userArg} \
           ${STDOUT_ARG} ${STDERR_ARG} \
           -e "SFTP_CLIENT=1" \
           -e "SERVICE=client" \
           -e "RUN_ENV=test" \
           -e "SFTP_SERVER=${container}" \
           -e "SFTP_PORT=${SFTP_PORT}" \
           -e "INTERACTIVE=$INTERACTIVE" \
           -e "ENTRYPOINT_DEBUG=${ENTRYPOINT_DEBUG}" \
           --entrypoint /usr/local/sweet/sbin/sweet-entrypoint.sh \
           ${image} \
           --source=/usr/local/sftp-server/sbin/sftp-cl-entrypoint.rc \
           /usr/local/sftp-server/sbin/sftp-client-shell "$@"
    set : `docker inspect -f '{{range $key, $value := .NetworkSettings.Networks}}{{$key}} {{end}}' ${cl_container}`
    clnet="$2"
    echo "Using network \"${clnet}\""

    echo "Starting container \"${cl_container}\"..."
    docker start ${ATTACHED} $iOpt ${cl_container}
}


processCommandLine () {
    while [ $# != 0 ] ; do
        arg="$1"
        shift
        case $arg in
            -h|--help)
                cat <<EOF
NAME            
        $PROG - $DESC

SYNOPSIS
        $USAGE1
        $USAGE2
        $USAGE3

DESCRIPTION$HELP_TEXT
ENVIRONMENT$ENVIRONMENT_HELP
EOF
                return 1 ;;

            -d?*)
                opt=`expr "${arg}" : '\(-.\).*'`
                rest=`expr "${arg}" : '-.\(.*\)'`
                set : ${opt} "-${rest}" "$@"
                shift ;;

            -[nusci]?*)
                opt=`expr "${arg}" : '\(-.\).*'`
                rest=`expr "${arg}" : '-.\(.*\)'`
                set : ${opt} "${rest}" "$@"
                shift ;;

            --*=*)
                opt=`expr "${arg}" : '\(--[^=]*\)=.*'`
                rest=`expr "${arg}" : '--[^=]*=\(.*\)'`
                set : ${opt} "${rest}" "$@"
                shift ;;
            
            -u|--user)
                USER_ARG="$1"
                shift ;;
            
            -s|--server)
                SFTP_CONT="$1"
                shift ;;
            
            -c|--client)
                CL_CONT="$1"
                shift ;;
            
            -n|--network)
                NETWORK="$1"
                shift ;;
            
            -i|--image)
                IMAGE="$1"
                shift ;;
            
            -d|--detach)
                ATTACHED= ;;
            
            --rm)
                RM_ARG=--rm ;;
            
            -*)
                echo "$PROG: invalid option: $arg" >&2
                echo "$USAGE" >&2
                return 1 ;;
            *)
                COMMAND="$arg $@"
                break ;;
        esac
    done
    
    if [ ":${NETWORK}" = ":" ] ; then
        NETWORK="${SFTP_CONT}_net"
    fi
    return 0

}

main "$@"


